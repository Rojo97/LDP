S -> { A }             NPATH = A.NP

A -> Flujo A   A.NP = Flujo.NP * A.NP
    | ε         A.NP = 1

Flujo -> If Else                Flujo.NP = If.NP + Else.NP
        | While                 Flujo.NP = While.NP
        | do { A } while ( C ) ;        Flujo.NP =  A.NP + C.NP + 1
        | For                   Flujo.NP = For.NP
        | Switch                Flujo.NP = Switch.NP

If -> if ( C ) Interior         If.NP = C.NP + Interior.NP + 1

Else -> else Interior              Else.NP = Interior.NP -1
        | ε                        Else.NP = 0

While -> while ( C ) Interior      While.NP = C.NP + Interior.NP + 1

For -> for ( ; C ; ) Interior    For.NP = C.NP + Interior.NP + 3

Switch ->  switch (  ) { Cases }        Switch.NP = 1 + Cases.NP

C -> ( C ) C2      C.NP = C.NP + C2.NP
    | id C2        C.NP = C2.NP
    | num C2       C.NP = C2.NP
    | Boolean C2   C.NP = Boolean.NP + C2.NP

C2 -> Comp C C2       C2.NP = Comp.NP + C.NP +  C2.NP
      | ε             C2.NP = 0

Comp ->   >    Comp.NP = 0
        | <    Comp.NP = 0
        | >=   Comp.NP = 0
        | <=   Comp.NP = 0
        | ==   Comp.NP = 0
        | !=   Comp.NP = 0
        | &&   Comp.NP = 1
        | ||   Comp.NP = 1
        | &    Comp.NP = 1
        | |    Comp.NP = 1

Boolean -> true       Boolean.NP = 0
          | false     Boolean.NP = 0


Cases -> case : A Cases          Cases.NP = A.NP + Cases.NP
        | default : A Cases            Cases.NP = A.NP + Cases.NP
        | ε                            Cases.NP = 0

Interior -> { A }               Interior.NP = A.NP
        | ;                   Interior.NP = 1